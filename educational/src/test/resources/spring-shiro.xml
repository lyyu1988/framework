<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- shiro redisManager -->
	<bean id="redisManager" class="cn.campus.platfrom.cache.shiro.RedisManager">
		<property name="host" value="${redis.server}"/>
		<property name="port" value="${redis.port}"/>
		<property name="password" value="${redis.password}"/>
		<property name="expire" value="1800"/>
        <property name="timeout" value="100000"/>
	</bean>

	<!-- cacheManager -->
	<bean id="shiroCacheManager" class="cn.campus.platfrom.cache.shiro.RedisCacheManager">
		<property name="redisManager" ref="redisManager" />
	</bean>

	<!-- redisSessionDAO -->
	<bean id="redisSessionDAO" class="cn.campus.platfrom.cache.shiro.RedisSessionDAO">
		<property name="redisManager" ref="redisManager" />
	</bean>

	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe"/>
		<property name="httpOnly" value="true"/>
		<property name="path" value="/"/>
		<property name="maxAge" value="2592000"/><!-- 30天 -->
	</bean>

	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
		<property name="cookie" ref="rememberMeCookie"/>
	</bean>

	<bean id="sessionCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sessionid"/>
		<property name="path" value="/"/>
	</bean>

	<!-- sessionManager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionDAO" ref="redisSessionDAO" />
		<property name="sessionIdCookie" ref="rememberMeCookie"/>
	</bean>

	<bean id="myRealm" class="cn.campus.platfrom.realm.MyRealm">
		<property name="credentialsMatcher">
			<!-- The 'bootstrapDataPopulator' Sha256 hashes the password
                 (using the username as the salt) then base64 encodes it: -->
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="SHA-256"/>
				<property name="hashIterations" value="10"/>
			</bean>
		</property>
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="shiroCacheManager"/>
		<property name="realms">
			<list>
				<ref bean="myRealm"/>
			</list>
		</property>
		<property name="rememberMeManager" ref="rememberMeManager"/>
	</bean>

	<!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
	<!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
	<!-- 不能使用 DefaultAdvisorAutoProxyCreator 会和 metrics 和 aspectj 冲突，
		 dao 配置文件中的 <aop:aspectj-autoproxy/> 会代替该功能
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		  depends-on="lifecycleBeanPostProcessor"/>
	-->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/login"/>
		<!--<property name="successUrl" value="/common/index"/>-->
		<property name="unauthorizedUrl" value="/unauthorized"/>
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
		<property name="filters">
			<!--
			<util:map>
				<entry key="authc">
					<bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter" />
				</entry>
			</util:map>
			-->
			<map>
				<entry key="api">
					<bean class="cn.campus.platfrom.filter.ApiFilter"/>
				</entry>
			</map>
        </property>
		<property name="filterChainDefinitions">
			<value>
				<!--
				/favicon.ico = anon
				/logo.png = anon
				/shiro.css = anon
				/s/login = anon
				# allow WebStart to pull the jars for the swing app:
				/*.jar = anon
				# everything else requires authentication:
				/** = authc
				-->
				/resource-page/**=anon
				/druid/**=anon
				/login/**=anon
				/api/**=api
				/**=authc
			</value>
		</property>
	</bean>
</beans>